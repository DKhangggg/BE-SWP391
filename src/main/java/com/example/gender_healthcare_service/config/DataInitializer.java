package com.example.gender_healthcare_service.config;

import com.example.gender_healthcare_service.entity.*;
import com.example.gender_healthcare_service.entity.enumpackage.QuestionStatus;
import com.example.gender_healthcare_service.repository.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;

@Component
@RequiredArgsConstructor
@Slf4j
public class DataInitializer implements CommandLineRunner {

    private final UserRepository userRepository;
    private final BlogCategoryRepository blogCategoryRepository;
    private final BlogPostRepository blogPostRepository;
    private final TestingServiceRepository testingServiceRepository;
    private final ConsultantRepository consultantRepository;
    private final SymptomRepository symptomRepository;
    private final LocationRepository locationRepository;
    private final ConsultantScheduleRepository consultantScheduleRepository;
    private final ReminderRepository reminderRepository;
    private final BCryptPasswordEncoder passwordEncoder;
    private final FeedbackRepository feedbackRepository;
    private final QuestionRepository questionRepository;
    private final AnswerRepository answerRepository;

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        log.info("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u...");
        
        try {
            // 1. T·∫°o Users (n·∫øu ch∆∞a c√≥)
            if (userRepository.count() == 0) {
                createUsers();
            } else {
                log.info("‚úÖ Users ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o users");
            }
            
            // 2. T·∫°o Blog Categories (n·∫øu ch∆∞a c√≥)
            if (blogCategoryRepository.count() == 0) {
                createBlogCategories();
            } else {
                log.info("‚úÖ Blog categories ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o categories");
            }
            
            // 2.1. T·∫°o Blog Posts (n·∫øu ch∆∞a c√≥)
            if (blogPostRepository.count() == 0) {
                createBlogPosts();
            } else {
                log.info("‚úÖ Blog posts ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o posts");
            }
            
            // 3. T·∫°o Testing Services (n·∫øu ch∆∞a c√≥)
            if (testingServiceRepository.count() == 0) {
                createTestingServices();
            } else {
                log.info("‚úÖ Testing services ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o services");
            }
            
            // 4. T·∫°o Consultants (n·∫øu ch∆∞a c√≥)
            if (consultantRepository.count() == 0) {
                createConsultants();
            } else {
                log.info("‚úÖ Consultants ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o consultants");
            }
            
            // 5. T·∫°o Symptoms (n·∫øu ch∆∞a c√≥)
            if (symptomRepository.count() == 0) {
                createSymptoms();
            } else {
                log.info("‚úÖ Symptoms ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o symptoms");
            }
            
            // 6. T·∫°o Locations (n·∫øu ch∆∞a c√≥)
            if (locationRepository.count() == 0) {
                createLocations();
            } else {
                log.info("‚úÖ Locations ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o locations");
            }
            
            // 7. T·∫°o Consultant Schedules (n·∫øu ch∆∞a c√≥)
            // if (consultantScheduleRepository.count() == 0) {
            //     createConsultantSchedules();
            // } else {
            //     log.info("‚úÖ Consultant schedules ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o schedules");
            // }
            
            // 8. T·∫°o Reminders (n·∫øu ch∆∞a c√≥)
            if (reminderRepository.count() == 0) {
                createReminders();
            } else {
                log.info("‚úÖ Reminders ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o reminders");
            }
            
            // 9. T·∫°o Feedback (n·∫øu ch∆∞a c√≥)
            if (feedbackRepository.count() == 0) {
                createFeedbacks();
            } else {
                log.info("‚úÖ Feedbacks ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o feedbacks");
            }
            
            // 10. T·∫°o Questions v√† Answers (n·∫øu ch∆∞a c√≥)
            if (questionRepository.count() == 0) {
                createQuestionsAndAnswers();
            } else {
                log.info("‚úÖ Questions v√† Answers ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o questions");
            }
            
            log.info("‚úÖ Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u th√†nh c√¥ng!");
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u: {}", e.getMessage(), e);
        }
    }

    private void createUsers() {
        log.info("üìù T·∫°o Users...");
        
        // Admin User
        User admin = new User();
        admin.setUsername("admin");
        admin.setPasswordHash(passwordEncoder.encode("1"));
        admin.setEmail("admin@gynexa.com");
        admin.setFullName("Administrator");
        admin.setPhoneNumber("0123456789");
        admin.setRoleName("ROLE_ADMIN");
        admin.setDescription("System Administrator");
        admin.setDateOfBirth(LocalDate.of(1990, 1, 1));
        admin.setAddress("H√† N·ªôi, Vi·ªát Nam");
        admin.setGender("Male");
        admin.setMedicalHistory("Kh√¥ng c√≥");
        admin.setCreatedAt(LocalDateTime.now());
        admin.setUpdatedAt(LocalDateTime.now());
        admin.setIsDeleted(false);
        
        // Manager User
        User manager = new User();
        manager.setUsername("manager");
        manager.setPasswordHash(passwordEncoder.encode("1"));
        manager.setEmail("manager@gynexa.com");
        manager.setFullName("Manager");
        manager.setPhoneNumber("0123456790");
        manager.setRoleName("ROLE_MANAGER");
        manager.setDescription("System Manager");
        manager.setDateOfBirth(LocalDate.of(1985, 5, 15));
        manager.setAddress("TP.HCM, Vi·ªát Nam");
        manager.setGender("Female");
        manager.setMedicalHistory("Kh√¥ng c√≥");
        manager.setCreatedAt(LocalDateTime.now());
        manager.setUpdatedAt(LocalDateTime.now());
        manager.setIsDeleted(false);
        
        // Staff User
        User staff = new User();
        staff.setUsername("staff");
        staff.setPasswordHash(passwordEncoder.encode("1"));
        staff.setEmail("staff@gynexa.com");
        staff.setFullName("Staff Member");
        staff.setPhoneNumber("0123456791");
        staff.setRoleName("ROLE_STAFF");
        staff.setDescription("Medical Staff");
        staff.setDateOfBirth(LocalDate.of(1992, 8, 20));
        staff.setAddress("ƒê√† N·∫µng, Vi·ªát Nam");
        staff.setGender("Female");
        staff.setMedicalHistory("Kh√¥ng c√≥");
        staff.setCreatedAt(LocalDateTime.now());
        staff.setUpdatedAt(LocalDateTime.now());
        staff.setIsDeleted(false);
        
        // Customer User
        User customer = new User();
        customer.setUsername("customer");
        customer.setPasswordHash(passwordEncoder.encode("1"));
        customer.setEmail("customer@example.com");
        customer.setFullName("Nguy·ªÖn Th·ªã Anh");
        customer.setPhoneNumber("0123456792");
        customer.setRoleName("ROLE_CUSTOMER");
        customer.setDescription("Regular Customer");
        customer.setDateOfBirth(LocalDate.of(1995, 12, 10));
        customer.setAddress("H·∫£i Ph√≤ng, Vi·ªát Nam");
        customer.setGender("Female");
        customer.setMedicalHistory("Kh√¥ng c√≥");
        customer.setCreatedAt(LocalDateTime.now());
        customer.setUpdatedAt(LocalDateTime.now());
        customer.setIsDeleted(false);
        
        // Customer User
        User customer2 = new User();
        customer2.setUsername("customer2");
        customer2.setPasswordHash(passwordEncoder.encode("1"));
        customer2.setEmail("customer2@example.com");
        customer2.setFullName("Ngg·ªçc Anh");
        customer2.setPhoneNumber("0123456122");
        customer2.setRoleName("ROLE_CUSTOMER");
        customer2.setDescription("Regular Customer");
        customer2.setDateOfBirth(LocalDate.of(1995, 11, 25));
        customer2.setAddress("HCM, Vi·ªát Nam");
        customer2.setGender("Female");
        customer2.setMedicalHistory("Kh√¥ng c√≥");
        customer2.setCreatedAt(LocalDateTime.now());
        customer2.setUpdatedAt(LocalDateTime.now());
        customer2.setIsDeleted(false);
        
         // Customer User
         User customer3 = new User();
         customer3.setUsername("customer3");
         customer3.setPasswordHash(passwordEncoder.encode("1"));
         customer3.setEmail("customer3@example.com");
         customer3.setFullName("Mina Anh");
         customer3.setPhoneNumber("0123456169");
         customer3.setRoleName("ROLE_CUSTOMER");
         customer3.setDescription("Regular Customer");
         customer3.setDateOfBirth(LocalDate.of(1995, 11, 24));
         customer3.setAddress("T√¢y Ninh, Vi·ªát Nam");
         customer3.setGender("Female");
         customer3.setMedicalHistory("Kh√¥ng c√≥");
         customer3.setCreatedAt(LocalDateTime.now());
         customer3.setUpdatedAt(LocalDateTime.now());
         customer3.setIsDeleted(false);
    

        userRepository.saveAll(Arrays.asList(admin, manager, staff, customer,customer2,customer3));
        log.info("‚úÖ ƒê√£ t·∫°o {} users", userRepository.count());
    }

    private void createBlogCategories() {
        log.info("üìÇ T·∫°o Blog Categories...");
        
        BlogCategory category1 = new BlogCategory();
        category1.setCategoryName("S·ª©c kh·ªèe sinh s·∫£n");
        category1.setSlug("suc-khoe-sinh-san");
        category1.setDescription("Th√¥ng tin v√† l·ªùi khuy√™n v·ªÅ s·ª©c kh·ªèe sinh s·∫£n ph·ª• n·ªØ, bao g·ªìm c√°c v·∫•n ƒë·ªÅ v·ªÅ sinh s·∫£n, thai k·ª≥ v√† c√°c b·ªánh ph·ª• khoa.");
        category1.setCreatedAt(LocalDateTime.now());
        category1.setUpdatedAt(LocalDateTime.now());
        category1.setIsDeleted(false);
        
        BlogCategory category2 = new BlogCategory();
        category2.setCategoryName("Chu k·ª≥ kinh nguy·ªát");
        category2.setSlug("chu-ky-kinh-nguyet");
        category2.setDescription("Ki·∫øn th·ª©c v·ªÅ chu k·ª≥ kinh nguy·ªát v√† c√°c v·∫•n ƒë·ªÅ li√™n quan, c√°ch theo d√µi v√† qu·∫£n l√Ω chu k·ª≥.");
        category2.setCreatedAt(LocalDateTime.now());
        category2.setUpdatedAt(LocalDateTime.now());
        category2.setIsDeleted(false);
        
        BlogCategory category3 = new BlogCategory();
        category3.setCategoryName("Mang thai & Sinh n·ªü");
        category3.setSlug("mang-thai-sinh-no");
        category3.setDescription("H∆∞·ªõng d·∫´n v√† chƒÉm s√≥c trong th·ªùi k·ª≥ mang thai, chu·∫©n b·ªã sinh n·ªü v√† chƒÉm s√≥c sau sinh.");
        category3.setCreatedAt(LocalDateTime.now());
        category3.setUpdatedAt(LocalDateTime.now());
        category3.setIsDeleted(false);
        
        BlogCategory category4 = new BlogCategory();
        category4.setCategoryName("Dinh d∆∞·ª°ng & L·ªëi s·ªëng");
        category4.setSlug("dinh-duong-loi-song");
        category4.setDescription("Dinh d∆∞·ª°ng v√† l·ªëi s·ªëng healthy cho ph·ª• n·ªØ, bao g·ªìm ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† t·∫≠p luy·ªán.");
        category4.setCreatedAt(LocalDateTime.now());
        category4.setUpdatedAt(LocalDateTime.now());
        category4.setIsDeleted(false);
        
        BlogCategory category5 = new BlogCategory();
        category5.setCategoryName("T√¢m l√Ω & Tinh th·∫ßn");
        category5.setSlug("tam-ly-tinh-than");
        category5.setDescription("ChƒÉm s√≥c s·ª©c kh·ªèe tinh th·∫ßn v√† t√¢m l√Ω ph·ª• n·ªØ, bao g·ªìm stress, tr·∫ßm c·∫£m v√† c√°c v·∫•n ƒë·ªÅ t√¢m l√Ω kh√°c.");
        category5.setCreatedAt(LocalDateTime.now());
        category5.setUpdatedAt(LocalDateTime.now());
        category5.setIsDeleted(false);
        
        BlogCategory category6 = new BlogCategory();
        category6.setCategoryName("B·ªánh ph·ª• khoa");
        category6.setSlug("benh-phu-khoa");
        category6.setDescription("Th√¥ng tin v·ªÅ c√°c b·ªánh ph·ª• khoa th∆∞·ªùng g·∫∑p, c√°ch ph√≤ng ng·ª´a v√† ƒëi·ªÅu tr·ªã.");
        category6.setCreatedAt(LocalDateTime.now());
        category6.setUpdatedAt(LocalDateTime.now());
        category6.setIsDeleted(false);
        
        blogCategoryRepository.saveAll(Arrays.asList(category1, category2, category3, category4, category5, category6));
        log.info("‚úÖ ƒê√£ t·∫°o {} blog categories", blogCategoryRepository.count());
    }

    private void createTestingServices() {
        log.info("üî¨ T·∫°o Testing Services...");
        
        TestingService service1 = new TestingService();
        service1.setServiceName("X√©t nghi·ªám hormone sinh s·∫£n");
        service1.setDescription("X√©t nghi·ªám ƒë·∫ßy ƒë·ªß c√°c hormone sinh s·∫£n bao g·ªìm FSH, LH, Estrogen, Progesterone v√† Testosterone ƒë·ªÉ ƒë√°nh gi√° ch·ª©c nƒÉng sinh s·∫£n.");
        service1.setPrice(new BigDecimal("850000.0"));
        service1.setDurationMinutes(119);
        service1.setStatus("ACTIVE");
        service1.setCreatedAt(LocalDateTime.now());
        service1.setUpdatedAt(LocalDateTime.now());
        service1.setIsDeleted(false);
        
        TestingService service2 = new TestingService();
        service2.setServiceName("T·∫ßm so√°t ung th∆∞ c·ªï t·ª≠ cung (Pap test)");
        service2.setDescription("X√©t nghi·ªám t·∫ø b√†o h·ªçc c·ªï t·ª≠ cung ƒë·ªÉ ph√°t hi·ªán s·ªõm c√°c t·∫ø b√†o b·∫•t th∆∞·ªùng v√† nguy c∆° ung th∆∞ c·ªï t·ª≠ cung.");
        service2.setPrice(new BigDecimal("450000.0"));
        service2.setDurationMinutes(30);
        service2.setStatus("ACTIVE");
        service2.setCreatedAt(LocalDateTime.now());
        service2.setUpdatedAt(LocalDateTime.now());
        service2.setIsDeleted(false);
        
        TestingService service3 = new TestingService();
        service3.setServiceName("Si√™u √¢m t·ª≠ cung bu·ªìng tr·ª©ng");
        service3.setDescription("Si√™u √¢m ƒë√°nh gi√° c·∫•u tr√∫c v√† ch·ª©c nƒÉng c·ªßa t·ª≠ cung, bu·ªìng tr·ª©ng v√† c√°c c∆° quan sinh s·∫£n kh√°c.");
        service3.setPrice(new BigDecimal("320000.0"));
        service3.setDurationMinutes(45);
        service3.setStatus("ACTIVE");
        service3.setCreatedAt(LocalDateTime.now());
        service3.setUpdatedAt(LocalDateTime.now());
        service3.setIsDeleted(false);
        
        TestingService service4 = new TestingService();
        service4.setServiceName("X√©t nghi·ªám nhi·ªÖm khu·∫©n sinh d·ª•c");
        service4.setDescription("X√©t nghi·ªám to√†n di·ªán c√°c t√°c nh√¢n g√¢y nhi·ªÖm khu·∫©n ƒë∆∞·ªùng sinh d·ª•c nh∆∞ Chlamydia, Gonorrhea, Trichomonas v√† c√°c vi khu·∫©n kh√°c.");
        service4.setPrice(new BigDecimal("680000.0"));
        service4.setDurationMinutes(90);
        service4.setStatus("ACTIVE");
        service4.setCreatedAt(LocalDateTime.now());
        service4.setUpdatedAt(LocalDateTime.now());
        service4.setIsDeleted(false);
        
        TestingService service5 = new TestingService();
        service5.setServiceName("X√©t nghi·ªám vitamin v√† kho√°ng ch·∫•t");
        service5.setDescription("ƒê√°nh gi√° m·ª©c ƒë·ªô vitamin D, B12, Folate, s·∫Øt, canxi v√† c√°c kho√°ng ch·∫•t quan tr·ªçng kh√°c cho s·ª©c kh·ªèe ph·ª• n·ªØ.");
        service5.setPrice(new BigDecimal("520000.0"));
        service5.setDurationMinutes(60);
        service5.setStatus("ACTIVE");
        service5.setCreatedAt(LocalDateTime.now());
        service5.setUpdatedAt(LocalDateTime.now());
        service5.setIsDeleted(false);
        
        TestingService service6 = new TestingService();
        service6.setServiceName("X√©t nghi·ªám ti·ªÅn m√£n kinh");
        service6.setDescription("B·ªô x√©t nghi·ªám chuy√™n bi·ªát ƒë√°nh gi√° t√¨nh tr·∫°ng ti·ªÅn m√£n kinh v√† c√°c thay ƒë·ªïi hormone li√™n quan.");
        service6.setPrice(new BigDecimal("420000.0"));
        service6.setDurationMinutes(75);
        service6.setStatus("ACTIVE");
        service6.setCreatedAt(LocalDateTime.now());
        service6.setUpdatedAt(LocalDateTime.now());
        service6.setIsDeleted(false);
        
        testingServiceRepository.saveAll(Arrays.asList(service1, service2, service3, service4, service5, service6));
        log.info("‚úÖ ƒê√£ t·∫°o {} testing services", testingServiceRepository.count());
    }

    private void createConsultants() {
        log.info("üë®‚Äç‚öïÔ∏è T·∫°o Consultants...");
        
        // Ki·ªÉm tra xem consultant ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (consultantRepository.count() > 0) {
            log.info("‚úÖ Consultants ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o consultants");
            return;
        }
        
        // T·∫°o User consultant1
        User consultantUser1 = userRepository.findUserByUsername("consultant1");
        if (consultantUser1 == null) {
            consultantUser1 = new User();
            consultantUser1.setUsername("consultant1");
            consultantUser1.setPasswordHash(passwordEncoder.encode("1"));
            consultantUser1.setEmail("consultant1@gynexa.com");
            consultantUser1.setFullName("B√°c sƒ© Nguy·ªÖn Th·ªã H∆∞∆°ng");
            consultantUser1.setPhoneNumber("0123456793");
            consultantUser1.setRoleName("ROLE_CONSULTANT");
            consultantUser1.setDescription("B√°c sƒ© chuy√™n khoa S·∫£n Ph·ª• khoa");
            consultantUser1.setDateOfBirth(LocalDate.of(1980, 3, 15));
            consultantUser1.setAddress("TP.HCM, Vi·ªát Nam");
            consultantUser1.setGender("Female");
            consultantUser1.setMedicalHistory("Kh√¥ng c√≥");
            consultantUser1.setCreatedAt(LocalDateTime.now());
            consultantUser1.setUpdatedAt(LocalDateTime.now());
            consultantUser1.setIsDeleted(false);
            consultantUser1 = userRepository.save(consultantUser1);
        }
        
        // T·∫°o User consultant2
        User consultantUser2 = userRepository.findUserByUsername("consultant2");
        if (consultantUser2 == null) {
            consultantUser2 = new User();
            consultantUser2.setUsername("consultant2");
            consultantUser2.setPasswordHash(passwordEncoder.encode("1"));
            consultantUser2.setEmail("consultant2@gynexa.com");
            consultantUser2.setFullName("B√°c sƒ© Tr·∫ßn VƒÉn Minh");
            consultantUser2.setPhoneNumber("0123456794");
            consultantUser2.setRoleName("ROLE_CONSULTANT");
            consultantUser2.setDescription("B√°c sƒ© chuy√™n khoa N·ªôi ti·∫øt - Sinh s·∫£n");
            consultantUser2.setDateOfBirth(LocalDate.of(1985, 7, 22));
            consultantUser2.setAddress("H√† N·ªôi, Vi·ªát Nam");
            consultantUser2.setGender("Male");
            consultantUser2.setMedicalHistory("Kh√¥ng c√≥");
            consultantUser2.setCreatedAt(LocalDateTime.now());
            consultantUser2.setUpdatedAt(LocalDateTime.now());
            consultantUser2.setIsDeleted(false);
            consultantUser2 = userRepository.save(consultantUser2);
        }
        
        // T·∫°o User consultant3
        User consultantUser3 = userRepository.findUserByUsername("consultant3");
        if (consultantUser3 == null) {
            consultantUser3 = new User();
            consultantUser3.setUsername("consultant3");
            consultantUser3.setPasswordHash(passwordEncoder.encode("1"));
            consultantUser3.setEmail("consultant3@gynexa.com");
            consultantUser3.setFullName("B√°c sƒ© L√™ Th·ªã Lan");
            consultantUser3.setPhoneNumber("0123456795");
            consultantUser3.setRoleName("ROLE_CONSULTANT");
            consultantUser3.setDescription("B√°c sƒ© chuy√™n v·ªÅ t√¢m l√Ω v√† s·ª©c kh·ªèe tinh th·∫ßn ph·ª• n·ªØ");
            consultantUser3.setDateOfBirth(LocalDate.of(1988, 11, 8));
            consultantUser3.setAddress("ƒê√† N·∫µng, Vi·ªát Nam");
            consultantUser3.setGender("Female");
            consultantUser3.setMedicalHistory("Kh√¥ng c√≥");
            consultantUser3.setCreatedAt(LocalDateTime.now());
            consultantUser3.setUpdatedAt(LocalDateTime.now());
            consultantUser3.setIsDeleted(false);
            consultantUser3 = userRepository.save(consultantUser3);
        }
        
        // T·∫°o Consultant records - KH√îNG set ID c·ª©ng
        Consultant consultant1 = new Consultant();
        consultant1.setUser(consultantUser1);
        consultant1.setBiography("B√°c sƒ© chuy√™n khoa S·∫£n Ph·ª• khoa v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám trong vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe ph·ª• n·ªØ. Chuy√™n v·ªÅ c√°c v·∫•n ƒë·ªÅ sinh s·∫£n, thai k·ª≥ v√† c√°c b·ªánh ph·ª• khoa.");
        consultant1.setQualifications("ƒê·∫°i h·ªçc Y khoa TP.HCM, Chuy√™n khoa c·∫•p 1 S·∫£n Ph·ª• khoa, Ch·ª©ng ch·ªâ si√™u √¢m s·∫£n ph·ª• khoa");
        consultant1.setExperienceYears(10);
        consultant1.setSpecialization("S·∫£n Ph·ª• khoa");
        consultant1.setIsDeleted(false);
        
        Consultant consultant2 = new Consultant();
        consultant2.setUser(consultantUser2);
        consultant2.setBiography("B√°c sƒ© chuy√™n khoa N·ªôi ti·∫øt - Sinh s·∫£n v·ªõi 8 nƒÉm kinh nghi·ªám. Chuy√™n v·ªÅ c√°c r·ªëi lo·∫°n n·ªôi ti·∫øt, v√¥ sinh v√† c√°c v·∫•n ƒë·ªÅ sinh s·∫£n.");
        consultant2.setQualifications("ƒê·∫°i h·ªçc Y D∆∞·ª£c TP.HCM, Th·∫°c sƒ© Y h·ªçc, Ch·ª©ng ch·ªâ chuy√™n khoa N·ªôi ti·∫øt");
        consultant2.setExperienceYears(8);
        consultant2.setSpecialization("N·ªôi ti·∫øt - Sinh s·∫£n");
        consultant2.setIsDeleted(false);
        
        Consultant consultant3 = new Consultant();
        consultant3.setUser(consultantUser3);
        consultant3.setBiography("B√°c sƒ© chuy√™n v·ªÅ t√¢m l√Ω v√† s·ª©c kh·ªèe tinh th·∫ßn ph·ª• n·ªØ. C√≥ kinh nghi·ªám trong vi·ªác t∆∞ v·∫•n t√¢m l√Ω cho ph·ª• n·ªØ trong c√°c giai ƒëo·∫°n kh√°c nhau c·ªßa cu·ªôc s·ªëng.");
        consultant3.setQualifications("ƒê·∫°i h·ªçc Y khoa H√† N·ªôi, Ch·ª©ng ch·ªâ t√¢m l√Ω l√¢m s√†ng. Chuy√™n v·ªÅ t√¢m l√Ω ph·ª• n·ªØ v√† gia ƒë√¨nh.");
        consultant3.setExperienceYears(6);
        consultant3.setSpecialization("T√¢m l√Ω s·ª©c kh·ªèe ph·ª• n·ªØ");
        consultant3.setIsDeleted(false);
        
        // Save t·ª´ng consultant m·ªôt
        consultantRepository.save(consultant1);
        consultantRepository.save(consultant2);
        consultantRepository.save(consultant3);
        
        log.info("‚úÖ ƒê√£ t·∫°o {} consultants", consultantRepository.count());
    }

    private void createSymptoms() {
        log.info("üè• T·∫°o Symptoms...");
        
        Symptom symptom1 = new Symptom();
        symptom1.setSymptomName("ƒêau b·ª•ng kinh");
        symptom1.setCategory("Chu k·ª≥ kinh nguy·ªát");
        symptom1.setDescription("ƒêau b·ª•ng d∆∞·ªõi trong th·ªùi k·ª≥ kinh nguy·ªát");
        symptom1.setIsActive(true);
        
        Symptom symptom2 = new Symptom();
        symptom2.setSymptomName("Ch·∫£y m√°u b·∫•t th∆∞·ªùng");
        symptom2.setCategory("Chu k·ª≥ kinh nguy·ªát");
        symptom2.setDescription("Ch·∫£y m√°u √¢m ƒë·∫°o kh√¥ng theo chu k·ª≥");
        symptom2.setIsActive(true);
        
        Symptom symptom3 = new Symptom();
        symptom3.setSymptomName("M·ªát m·ªèi");
        symptom3.setCategory("Tri·ªáu ch·ª©ng chung");
        symptom3.setDescription("C·∫£m gi√°c m·ªát m·ªèi, thi·∫øu nƒÉng l∆∞·ª£ng");
        symptom3.setIsActive(true);
        
        Symptom symptom4 = new Symptom();
        symptom4.setSymptomName("ƒêau ƒë·∫ßu");
        symptom4.setCategory("Tri·ªáu ch·ª©ng chung");
        symptom4.setDescription("ƒêau ƒë·∫ßu, c√≥ th·ªÉ k√®m theo bu·ªìn n√¥n");
        symptom4.setIsActive(true);
        
        Symptom symptom5 = new Symptom();
        symptom5.setSymptomName("Thay ƒë·ªïi t√¢m tr·∫°ng");
        symptom5.setCategory("T√¢m l√Ω");
        symptom5.setDescription("Thay ƒë·ªïi t√¢m tr·∫°ng, d·ªÖ c√°u g·∫Øt ho·∫∑c bu·ªìn b√£");
        symptom5.setIsActive(true);
        
        Symptom symptom6 = new Symptom();
        symptom6.setSymptomName("ƒêau ng·ª±c");
        symptom6.setCategory("Tri·ªáu ch·ª©ng chung");
        symptom6.setDescription("ƒêau ho·∫∑c cƒÉng t·ª©c v√πng ng·ª±c");
        symptom6.setIsActive(true);
        
        Symptom symptom7 = new Symptom();
        symptom7.setSymptomName("Kh√≥ ng·ªß");
        symptom7.setCategory("Gi·∫•c ng·ªß");
        symptom7.setDescription("Kh√≥ ƒëi v√†o gi·∫•c ng·ªß ho·∫∑c ng·ªß kh√¥ng s√¢u");
        symptom7.setIsActive(true);
        
        Symptom symptom8 = new Symptom();
        symptom8.setSymptomName("Ch√°n ƒÉn");
        symptom8.setCategory("Ti√™u h√≥a");
        symptom8.setDescription("Gi·∫£m c·∫£m gi√°c th√®m ƒÉn");
        symptom8.setIsActive(true);
        
        Symptom symptom9 = new Symptom();
        symptom9.setSymptomName("Bu·ªìn n√¥n");
        symptom9.setCategory("Ti√™u h√≥a");
        symptom9.setDescription("C·∫£m gi√°c bu·ªìn n√¥n, c√≥ th·ªÉ k√®m theo n√¥n");
        symptom9.setIsActive(true);
        
        symptomRepository.saveAll(Arrays.asList(symptom1, symptom2, symptom3, symptom4, symptom5, symptom6, symptom7, symptom8, symptom9));
        log.info("‚úÖ ƒê√£ t·∫°o {} symptoms", symptomRepository.count());
    }

    private void createLocations() {
        log.info("üè• T·∫°o Locations...");
        
        Location location1 = new Location();
        location1.setName("Ph√≤ng kh√°m ƒêa khoa Nguy·ªÖn Tr√£i");
        location1.setAddress("123 Nguy·ªÖn Tr√£i, Qu·∫≠n 1, TP.HCM");
        location1.setPhone("0283 888 9999");
        location1.setHours("T2 - CN: 7h00 - 20h00");
        location1.setStatus("Ho·∫°t ƒë·ªông");
        location1.setIsDeleted(false);
        location1.setCreateAt(LocalDateTime.now());
        location1.setUpdateAt(LocalDateTime.now());
        
        Location location2 = new Location();
        location2.setName("Ph√≤ng kh√°m Ph·ª• khoa T√¢n B√¨nh");
        location2.setAddress("456 L√™ VƒÉn Vi·ªát, T√¢n B√¨nh, TP.HCM");
        location2.setPhone("0283 777 8888");
        location2.setHours("T2 - T7: 8h00 - 17h00");
        location2.setStatus("Ho·∫°t ƒë·ªông");
        location2.setIsDeleted(false);
        location2.setCreateAt(LocalDateTime.now());
        location2.setUpdateAt(LocalDateTime.now());
        
        Location location3 = new Location();
        location3.setName("B·ªánh vi·ªán Ph·ª• s·∫£n H√πng V∆∞∆°ng");
        location3.setAddress("789 L√Ω Th∆∞·ªùng Ki·ªát, Qu·∫≠n 10, TP.HCM");
        location3.setPhone("0283 666 7777");
        location3.setHours("T2 - CN: 24/24");
        location3.setStatus("Ho·∫°t ƒë·ªông");
        location3.setIsDeleted(false);
        location3.setCreateAt(LocalDateTime.now());
        location3.setUpdateAt(LocalDateTime.now());
        
        Location location4 = new Location();
        location4.setName("Tr·∫°m Y t·∫ø Ph∆∞·ªùng Linh Trung");
        location4.setAddress("12 L√™ VƒÉn Vi·ªát, Th·ªß ƒê·ª©c, TP.HCM");
        location4.setPhone("0283 111 2233");
        location4.setHours("T2 - T6: 7h30 - 16h00");
        location4.setStatus("ƒêang b·∫£o tr√¨");
        location4.setIsDeleted(false);
        location4.setCreateAt(LocalDateTime.now());
        location4.setUpdateAt(LocalDateTime.now());
        
        Location location5 = new Location();
        location5.setName("Ph√≤ng kh√°m T∆∞ nh√¢n Dr. Hoa");
        location5.setAddress("321 V√µ VƒÉn T·∫ßn, Qu·∫≠n 3, TP.HCM");
        location5.setPhone("0283 444 5555");
        location5.setHours("T2 - T7: 9h00 - 18h00");
        location5.setStatus("Ho·∫°t ƒë·ªông");
        location5.setIsDeleted(false);
        location5.setCreateAt(LocalDateTime.now());
        location5.setUpdateAt(LocalDateTime.now());
        
        locationRepository.saveAll(Arrays.asList(location1, location2, location3, location4, location5));
        log.info("‚úÖ ƒê√£ t·∫°o {} locations", locationRepository.count());
    }

    private void createConsultantSchedules() {
        log.info("üìÖ T·∫°o Consultant Schedules...");
        
        // L·∫•y consultants
        List<Consultant> consultants = consultantRepository.findAll();
        if (consultants.isEmpty()) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ consultants ƒë·ªÉ t·∫°o schedule");
            return;
        }
        
        LocalDate startDate = LocalDate.now().plusDays(1);
        List<ConsultantSchedule> schedules = new ArrayList<>();
        
        for (Consultant consultant : consultants) {
            // T·∫°o schedule cho 3 ng√†y ti·∫øp theo
            for (int i = 0; i < 3; i++) {
                LocalDate scheduleDate = startDate.plusDays(i);
                
                // T·∫°o 2 time slots m·ªói ng√†y
                for (int slot = 1; slot <= 2; slot++) {
                    ConsultantSchedule schedule = new ConsultantSchedule();
                    schedule.setConsultant(consultant);
                    schedule.setScheduleDate(scheduleDate);
                    schedule.setStatus("AVAILABLE");
                    schedule.setNotes("S·∫µn s√†ng kh√°m");
                    schedule.setCreatedAt(LocalDateTime.now());
                    schedule.setIsDeleted(false);
                    schedules.add(schedule);
                }
            }
        }
        
        consultantScheduleRepository.saveAll(schedules);
        log.info("‚úÖ ƒê√£ t·∫°o {} consultant schedules", consultantScheduleRepository.count());
    }

    private void createReminders() {
        log.info("‚è∞ T·∫°o Reminders...");
        
        // L·∫•y customer user
        User customer = userRepository.findUserByUsername("customer");
        if (customer == null) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ customer ƒë·ªÉ t·∫°o reminders");
            return;
        }
        
        List<Reminder> reminders = new ArrayList<>();
        
        for (int i = 1; i <= 5; i++) {
            Reminder reminder = new Reminder();
            reminder.setUser(customer);
            reminder.setReminderType("Kh√°m ƒë·ªãnh k·ª≥");
            reminder.setReminderDate(LocalDateTime.now().plusDays(i * 7));
            reminder.setReminderTime(LocalDateTime.now().plusDays(i * 7).withHour(9).withMinute(0));
            reminder.setMessage("Nh·∫Øc nh·ªü: L·ªãch kh√°m ƒë·ªãnh k·ª≥ v√†o tu·∫ßn t·ªõi");
            reminder.setIsSent(false);
            reminder.setCreatedAt(LocalDateTime.now());
            reminder.setIsDeleted(false);
            reminders.add(reminder);
        }
        
        reminderRepository.saveAll(reminders);
        log.info("‚úÖ ƒê√£ t·∫°o {} reminders", reminderRepository.count());
    }

    private void createFeedbacks() {
        log.info("üí¨ T·∫°o Feedbacks...");
        
        // L·∫•y customers
        User customer1 = userRepository.findUserByUsername("customer");
        User customer2 = userRepository.findUserByUsername("customer2");
        User customer3 = userRepository.findUserByUsername("customer3");
        
        // L·∫•y consultants
        List<Consultant> consultants = consultantRepository.findAll();
        
        if (customer1 == null || customer2 == null || customer3 == null) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ ƒë·ªß customers ƒë·ªÉ t·∫°o feedbacks");
            return;
        }
        
        if (consultants.isEmpty()) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ consultants ƒë·ªÉ t·∫°o feedbacks");
            return;
        }
        
        List<Feedback> feedbacks = new ArrayList<>();
        
        // Feedback t·ª´ customer1 cho consultant1
        Feedback feedback1 = new Feedback();
        feedback1.setCustomer(customer1);
        feedback1.setConsultant(consultants.get(0).getUser());
        feedback1.setRating(5);
        feedback1.setComment("B√°c sƒ© r·∫•t t·∫≠n t√¢m v√† chuy√™n nghi·ªáp. T√¥i r·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª• t∆∞ v·∫•n!");
        feedback1.setCreatedAt(LocalDateTime.now().minusDays(5));
        feedback1.setIsDeleted(false);
        feedbacks.add(feedback1);
        
        // Feedback t·ª´ customer2 cho consultant2
        Feedback feedback2 = new Feedback();
        feedback2.setCustomer(customer2);
        feedback2.setConsultant(consultants.get(1).getUser());
        feedback2.setRating(4);
        feedback2.setComment("B√°c sƒ© gi·∫£i th√≠ch r·∫•t r√µ r√†ng v√† d·ªÖ hi·ªÉu. C·∫£m ∆°n b√°c sƒ© ƒë√£ t∆∞ v·∫•n!");
        feedback2.setCreatedAt(LocalDateTime.now().minusDays(3));
        feedback2.setIsDeleted(false);
        feedbacks.add(feedback2);
        
        // Feedback t·ª´ customer3 cho consultant3
        Feedback feedback3 = new Feedback();
        feedback3.setCustomer(customer3);
        feedback3.setConsultant(consultants.get(2).getUser());
        feedback3.setRating(5);
        feedback3.setComment("D·ªãch v·ª• r·∫•t t·ªët, b√°c sƒ© r·∫•t ki√™n nh·∫´n v√† t·∫≠n t√¢m. T√¥i s·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√®!");
        feedback3.setCreatedAt(LocalDateTime.now().minusDays(1));
        feedback3.setIsDeleted(false);
        feedbacks.add(feedback3);
        
        // Feedback t·ª´ customer1 cho consultant2
        Feedback feedback4 = new Feedback();
        feedback4.setCustomer(customer1);
        feedback4.setConsultant(consultants.get(1).getUser());
        feedback4.setRating(4);
        feedback4.setComment("B√°c sƒ© r·∫•t gi·ªèi v√† c√≥ kinh nghi·ªám. T√¥i r·∫•t tin t∆∞·ªüng!");
        feedback4.setCreatedAt(LocalDateTime.now().minusDays(2));
        feedback4.setIsDeleted(false);
        feedbacks.add(feedback4);
        
        // Feedback t·ª´ customer2 cho consultant3
        Feedback feedback5 = new Feedback();
        feedback5.setCustomer(customer2);
        feedback5.setConsultant(consultants.get(2).getUser());
        feedback5.setRating(5);
        feedback5.setComment("B√°c sƒ© r·∫•t t·∫≠n t√¢m v√† chuy√™n nghi·ªáp. T√¥i r·∫•t h√†i l√≤ng!");
        feedback5.setCreatedAt(LocalDateTime.now().minusDays(4));
        feedback5.setIsDeleted(false);
        feedbacks.add(feedback5);
        
        feedbackRepository.saveAll(feedbacks);
        log.info("‚úÖ ƒê√£ t·∫°o {} feedbacks", feedbackRepository.count());
    }

    private void createQuestionsAndAnswers() {
        log.info("‚ùì T·∫°o Questions v√† Answers...");
        
        // L·∫•y customers
        User customer1 = userRepository.findUserByUsername("customer");
        User customer2 = userRepository.findUserByUsername("customer2");
        User customer3 = userRepository.findUserByUsername("customer3");
        
        // L·∫•y consultants
        List<Consultant> consultants = consultantRepository.findAll();
        
        if (customer1 == null || customer2 == null || customer3 == null) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ ƒë·ªß customers ƒë·ªÉ t·∫°o questions");
            return;
        }
        
        if (consultants.isEmpty()) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ consultants ƒë·ªÉ t·∫°o answers");
            return;
        }
        
        List<Question> questions = new ArrayList<>();
        List<Answer> answers = new ArrayList<>();
        
        // Question 1 t·ª´ customer1
        Question question1 = new Question();
        question1.setUser(customer1);
        question1.setCategory("general");
        question1.setContent("T√¥i mu·ªën h·ªèi v·ªÅ chu k·ª≥ kinh nguy·ªát kh√¥ng ƒë·ªÅu. C√≥ c√°ch n√†o ƒë·ªÉ ƒëi·ªÅu h√≤a kh√¥ng?");
        question1.setStatus(QuestionStatus.ANSWERED);
        question1.setPublic(true);
        question1.setAnswered(true);
        question1.setCreatedAt(LocalDateTime.now().minusDays(10));
        question1.setUpdatedAt(LocalDateTime.now().minusDays(8));
        question1.setDeleted(false);
        questions.add(question1);
        
        // Answer 1 t·ª´ consultant1
        Answer answer1 = new Answer();
        answer1.setQuestion(question1);
        answer1.setConsultant(consultants.get(0));
        answer1.setContent("Chu k·ª≥ kinh nguy·ªát kh√¥ng ƒë·ªÅu c√≥ th·ªÉ do stress, ƒÉn u·ªëng, ho·∫∑c hormone. B·∫°n n√™n duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh v√† kh√°m b√°c sƒ© n·∫øu k√©o d√†i.");
        answer1.setCreatedAt(LocalDateTime.now().minusDays(8));
        answer1.setUpdatedAt(LocalDateTime.now().minusDays(8));
        answer1.setDeleted(false);
        answers.add(answer1);
        
        // Question 2 t·ª´ customer2
        Question question2 = new Question();
        question2.setUser(customer2);
        question2.setCategory("contraception");
        question2.setContent("T√¥i ƒëang t√¨m hi·ªÉu v·ªÅ c√°c ph∆∞∆°ng ph√°p tr√°nh thai. B√°c sƒ© c√≥ th·ªÉ t∆∞ v·∫•n gi√∫p t√¥i kh√¥ng?");
        question2.setStatus(QuestionStatus.ANSWERED);
        question2.setPublic(true);
        question2.setAnswered(true);
        question2.setCreatedAt(LocalDateTime.now().minusDays(7));
        question2.setUpdatedAt(LocalDateTime.now().minusDays(6));
        question2.setDeleted(false);
        questions.add(question2);
        
        // Answer 2 t·ª´ consultant2
        Answer answer2 = new Answer();
        answer2.setQuestion(question2);
        answer2.setConsultant(consultants.get(1));
        answer2.setContent("C√≥ nhi·ªÅu ph∆∞∆°ng ph√°p tr√°nh thai nh∆∞ thu·ªëc, v√≤ng, bao cao su. B·∫°n n√™n g·∫∑p b√°c sƒ© ƒë·ªÉ ch·ªçn ph∆∞∆°ng ph√°p ph√π h·ª£p.");
        answer2.setCreatedAt(LocalDateTime.now().minusDays(6));
        answer2.setUpdatedAt(LocalDateTime.now().minusDays(6));
        answer2.setDeleted(false);
        answers.add(answer2);
        
        // Question 3 t·ª´ customer3
        Question question3 = new Question();
        question3.setUser(customer3);
        question3.setCategory("menstruation");
        question3.setContent("T√¥i th∆∞·ªùng b·ªã ƒëau b·ª•ng kinh r·∫•t nhi·ªÅu. C√≥ c√°ch n√†o gi·∫£m ƒëau hi·ªáu qu·∫£ kh√¥ng?");
        question3.setStatus(QuestionStatus.ANSWERED);
        question3.setPublic(true);
        question3.setAnswered(true);
        question3.setCreatedAt(LocalDateTime.now().minusDays(5));
        question3.setUpdatedAt(LocalDateTime.now().minusDays(4));
        question3.setDeleted(false);
        questions.add(question3);
        
        // Answer 3 t·ª´ consultant3
        Answer answer3 = new Answer();
        answer3.setQuestion(question3);
        answer3.setConsultant(consultants.get(2));
        answer3.setContent("ƒêau b·ª•ng kinh c√≥ th·ªÉ gi·∫£m b·∫±ng ch∆∞·ªùm ·∫•m, t·∫≠p th·ªÉ d·ª•c nh·∫π, ƒÉn u·ªëng ƒë·ªß ch·∫•t. N·∫øu ƒëau nhi·ªÅu, n√™n ƒëi kh√°m b√°c sƒ©.");
        answer3.setCreatedAt(LocalDateTime.now().minusDays(4));
        answer3.setUpdatedAt(LocalDateTime.now().minusDays(4));
        answer3.setDeleted(false);
        answers.add(answer3);
        
        // Question 4 t·ª´ customer1 (ch∆∞a tr·∫£ l·ªùi)
        Question question4 = new Question();
        question4.setUser(customer1);
        question4.setCategory("pregnancy");
        question4.setContent("T√¥i ƒëang mang thai th√°ng th·ª© 3. C·∫ßn l∆∞u √Ω g√¨ v·ªÅ dinh d∆∞·ª°ng kh√¥ng?");
        question4.setStatus(QuestionStatus.PENDING);
        question4.setPublic(true);
        question4.setAnswered(false);
        question4.setCreatedAt(LocalDateTime.now().minusDays(2));
        question4.setUpdatedAt(LocalDateTime.now().minusDays(2));
        question4.setDeleted(false);
        questions.add(question4);
        
        // Question 5 t·ª´ customer2 (ch∆∞a tr·∫£ l·ªùi)
        Question question5 = new Question();
        question5.setUser(customer2);
        question5.setCategory("sti");
        question5.setContent("T√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ c√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c. C√°ch ph√≤ng ng·ª´a hi·ªáu qu·∫£ l√† g√¨?");
        question5.setStatus(QuestionStatus.PENDING);
        question5.setPublic(true);
        question5.setAnswered(false);
        question5.setCreatedAt(LocalDateTime.now().minusDays(1));
        question5.setUpdatedAt(LocalDateTime.now().minusDays(1));
        question5.setDeleted(false);
        questions.add(question5);
        
        questionRepository.saveAll(questions);
        answerRepository.saveAll(answers);
        
        log.info("‚úÖ ƒê√£ t·∫°o {} questions v√† {} answers", questionRepository.count(), answerRepository.count());
    }

    private void createBlogPosts() {
        log.info("üìù T·∫°o Blog Posts...");
        
        // L·∫•y categories v√† authors
        List<BlogCategory> categories = blogCategoryRepository.findAll();
        List<User> authors = new ArrayList<>();
        authors.addAll(userRepository.findUserByRoleName("ROLE_ADMIN"));
        authors.addAll(userRepository.findUserByRoleName("ROLE_CONSULTANT"));
        authors.addAll(userRepository.findUserByRoleName("ROLE_STAFF"));
        
        if (categories.isEmpty()) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ categories ƒë·ªÉ t·∫°o blog posts");
            return;
        }
        
        if (authors.isEmpty()) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ authors ƒë·ªÉ t·∫°o blog posts");
            return;
        }
        
        List<BlogPost> posts = new ArrayList<>();
        
        // Post 1: S·ª©c kh·ªèe sinh s·∫£n
        BlogPost post1 = new BlogPost();
        post1.setTitle("S·ª©c kh·ªèe sinh s·∫£n n·ªØ gi·ªõi: Nh·ªØng ƒëi·ªÅu c·∫ßn bi·∫øt");
        post1.setSlug("suc-khoe-sinh-san-nu-gioi-nhung-dieu-can-biet");
        post1.setSummary("B√†i vi·∫øt cung c·∫•p th√¥ng tin c∆° b·∫£n v·ªÅ s·ª©c kh·ªèe sinh s·∫£n n·ªØ gi·ªõi v√† c√°ch chƒÉm s√≥c.");
        post1.setContent("<h2>S·ª©c kh·ªèe sinh s·∫£n l√† g√¨?</h2><p>S·ª©c kh·ªèe sinh s·∫£n l√† m·ªôt ph·∫ßn quan tr·ªçng trong cu·ªôc s·ªëng c·ªßa ph·ª• n·ªØ. B√†i vi·∫øt n√†y s·∫Ω cung c·∫•p nh·ªØng th√¥ng tin c∆° b·∫£n v·ªÅ s·ª©c kh·ªèe sinh s·∫£n v√† c√°ch chƒÉm s√≥c...</p><h3>1. Kh√°m ph·ª• khoa ƒë·ªãnh k·ª≥</h3><p>Vi·ªác kh√°m ph·ª• khoa ƒë·ªãnh k·ª≥ r·∫•t quan tr·ªçng ƒë·ªÉ ph√°t hi·ªán s·ªõm c√°c v·∫•n ƒë·ªÅ v·ªÅ s·ª©c kh·ªèe sinh s·∫£n...</p><h3>2. V·ªá sinh c√° nh√¢n</h3><p>V·ªá sinh c√° nh√¢n ƒë√∫ng c√°ch gi√∫p ph√≤ng ng·ª´a c√°c b·ªánh nhi·ªÖm tr√πng...</p>");
        post1.setTags("s·ª©c kh·ªèe sinh s·∫£n, ph·ª• khoa, chƒÉm s√≥c");
        post1.setViews(1250);
        post1.setLikes(89);
        post1.setCommentsCount(12);
        post1.setAuthor(authors.get(0));
        post1.setCategories(new HashSet<>(Arrays.asList(categories.get(0)))); // S·ª©c kh·ªèe sinh s·∫£n
        post1.setIsPublished(true);
        post1.setCreatedAt(LocalDateTime.now().minusDays(5));
        post1.setUpdatedAt(LocalDateTime.now().minusDays(5));
        post1.setIsDeleted(false);
        posts.add(post1);
        
        // Post 2: Chu k·ª≥ kinh nguy·ªát
        BlogPost post2 = new BlogPost();
        post2.setTitle("Chu k·ª≥ kinh nguy·ªát: Hi·ªÉu ƒë√∫ng ƒë·ªÉ chƒÉm s√≥c t·ªët h∆°n");
        post2.setSlug("chu-ky-kinh-nguyet-hieu-dung-de-cham-soc-tot-hon");
        post2.setSummary("Hi·ªÉu r√µ v·ªÅ chu k·ª≥ kinh nguy·ªát s·∫Ω gi√∫p b·∫°n chƒÉm s√≥c s·ª©c kh·ªèe t·ªët h∆°n.");
        post2.setContent("<h2>Chu k·ª≥ kinh nguy·ªát l√† g√¨?</h2><p>Chu k·ª≥ kinh nguy·ªát l√† m·ªôt hi·ªán t∆∞·ª£ng sinh l√Ω b√¨nh th∆∞·ªùng c·ªßa c∆° th·ªÉ ph·ª• n·ªØ. Hi·ªÉu r√µ v·ªÅ chu k·ª≥ kinh nguy·ªát s·∫Ω gi√∫p b·∫°n chƒÉm s√≥c s·ª©c kh·ªèe t·ªët h∆°n...</p><h3>1. C√°c giai ƒëo·∫°n c·ªßa chu k·ª≥</h3><p>Chu k·ª≥ kinh nguy·ªát th∆∞·ªùng k√©o d√†i 28-35 ng√†y v√† ƒë∆∞·ª£c chia th√†nh 4 giai ƒëo·∫°n ch√≠nh...</p><h3>2. D·∫•u hi·ªáu b·∫•t th∆∞·ªùng</h3><p>M·ªôt s·ªë d·∫•u hi·ªáu b·∫•t th∆∞·ªùng c·∫ßn l∆∞u √Ω nh∆∞ ƒëau b·ª•ng d·ªØ d·ªôi, rong kinh...</p>");
        post2.setTags("chu k·ª≥ kinh nguy·ªát, theo d√µi, s·ª©c kh·ªèe");
        post2.setViews(890);
        post2.setLikes(67);
        post2.setCommentsCount(8);
        post2.setAuthor(authors.get(0));
        post2.setCategories(new HashSet<>(Arrays.asList(categories.get(1)))); // Chu k·ª≥ kinh nguy·ªát
        post2.setIsPublished(true);
        post2.setCreatedAt(LocalDateTime.now().minusDays(4));
        post2.setUpdatedAt(LocalDateTime.now().minusDays(4));
        post2.setIsDeleted(false);
        posts.add(post2);
        
        // Post 3: C√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c
        BlogPost post3 = new BlogPost();
        post3.setTitle("C√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c: Ph√≤ng ng·ª´a v√† ƒëi·ªÅu tr·ªã");
        post3.setSlug("cac-benh-lay-truyen-qua-duong-tinh-duc-phong-ngua-va-dieu-tri");
        post3.setSummary("Th√¥ng tin v·ªÅ c√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c v√† c√°ch ph√≤ng ng·ª´a.");
        post3.setContent("<h2>STIs l√† g√¨?</h2><p>C√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (STIs) l√† nh·ªØng b·ªánh nhi·ªÖm tr√πng c√≥ th·ªÉ l√¢y truy·ªÅn qua quan h·ªá t√¨nh d·ª•c. B√†i vi·∫øt n√†y s·∫Ω cung c·∫•p th√¥ng tin v·ªÅ c√°ch ph√≤ng ng·ª´a v√† ƒëi·ªÅu tr·ªã...</p><h3>1. C√°c b·ªánh STIs ph·ªï bi·∫øn</h3><p>Chlamydia, Gonorrhea, HPV, HIV l√† nh·ªØng b·ªánh STIs ph·ªï bi·∫øn nh·∫•t...</p><h3>2. C√°ch ph√≤ng ng·ª´a</h3><p>S·ª≠ d·ª•ng bao cao su, kh√°m ƒë·ªãnh k·ª≥, ti√™m v·∫Øc-xin l√† nh·ªØng c√°ch ph√≤ng ng·ª´a hi·ªáu qu·∫£...</p>");
        post3.setTags("STIs, b·ªánh l√¢y truy·ªÅn, ph√≤ng ng·ª´a");
        post3.setViews(1560);
        post3.setLikes(123);
        post3.setCommentsCount(15);
        post3.setAuthor(authors.get(0));
        post3.setCategories(new HashSet<>(Arrays.asList(categories.get(5)))); // B·ªánh ph·ª• khoa
        post3.setIsPublished(true);
        post3.setCreatedAt(LocalDateTime.now().minusDays(3));
        post3.setUpdatedAt(LocalDateTime.now().minusDays(3));
        post3.setIsDeleted(false);
        posts.add(post3);
        
        // Post 4: Dinh d∆∞·ª°ng cho ph·ª• n·ªØ mang thai
        BlogPost post4 = new BlogPost();
        post4.setTitle("Dinh d∆∞·ª°ng cho ph·ª• n·ªØ mang thai theo t·ª´ng th√°ng");
        post4.setSlug("dinh-duong-cho-phu-nu-mang-thai-theo-tung-thang");
        post4.setSummary("H∆∞·ªõng d·∫´n dinh d∆∞·ª°ng chi ti·∫øt cho ph·ª• n·ªØ mang thai theo t·ª´ng th√°ng.");
        post4.setContent("<h2>T·∫ßm quan tr·ªçng c·ªßa dinh d∆∞·ª°ng khi mang thai</h2><p>Dinh d∆∞·ª°ng ƒë√∫ng c√°ch trong thai k·ª≥ r·∫•t quan tr·ªçng cho s·ª± ph√°t tri·ªÉn c·ªßa thai nhi v√† s·ª©c kh·ªèe c·ªßa m·∫π b·∫ßu...</p><h3>1. Tam c√° nguy·ªát ƒë·∫ßu ti√™n</h3><p>Trong 3 th√°ng ƒë·∫ßu, m·∫π b·∫ßu c·∫ßn b·ªï sung axit folic, s·∫Øt v√† canxi...</p><h3>2. Tam c√° nguy·ªát th·ª© hai</h3><p>Giai ƒëo·∫°n n√†y c·∫ßn tƒÉng c∆∞·ªùng protein v√† omega-3...</p>");
        post4.setTags("dinh d∆∞·ª°ng, mang thai, m·∫π b·∫ßu");
        post4.setViews(980);
        post4.setLikes(76);
        post4.setCommentsCount(9);
        post4.setAuthor(authors.get(0));
        post4.setCategories(new HashSet<>(Arrays.asList(categories.get(2), categories.get(3)))); // Mang thai & Dinh d∆∞·ª°ng
        post4.setIsPublished(true);
        post4.setCreatedAt(LocalDateTime.now().minusDays(2));
        post4.setUpdatedAt(LocalDateTime.now().minusDays(2));
        post4.setIsDeleted(false);
        posts.add(post4);
        
        // Post 5: D·∫•u hi·ªáu c·∫£nh b√°o chu k·ª≥ b·∫•t th∆∞·ªùng
        BlogPost post5 = new BlogPost();
        post5.setTitle("5 d·∫•u hi·ªáu c·∫£nh b√°o chu k·ª≥ kinh nguy·ªát b·∫•t th∆∞·ªùng");
        post5.setSlug("5-dau-hieu-canh-bao-chu-ky-kinh-nguyet-bat-thuong");
        post5.setSummary("Nh·∫≠n bi·∫øt c√°c d·∫•u hi·ªáu b·∫•t th∆∞·ªùng c·ªßa chu k·ª≥ kinh nguy·ªát ƒë·ªÉ k·ªãp th·ªùi ƒëi·ªÅu tr·ªã.");
        post5.setContent("<h2>Chu k·ª≥ kinh nguy·ªát b√¨nh th∆∞·ªùng</h2><p>Chu k·ª≥ kinh nguy·ªát l√† qu√° tr√¨nh sinh l√Ω t·ª± nhi√™n c·ªßa c∆° th·ªÉ ph·ª• n·ªØ. Tuy nhi√™n, c√≥ m·ªôt s·ªë d·∫•u hi·ªáu b·∫•t th∆∞·ªùng c·∫ßn l∆∞u √Ω...</p><h3>1. Rong kinh k√©o d√†i</h3><p>Khi kinh nguy·ªát k√©o d√†i h∆°n 7 ng√†y, ƒë√¢y c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa b·ªánh l√Ω...</p><h3>2. ƒêau b·ª•ng d·ªØ d·ªôi</h3><p>ƒêau b·ª•ng kinh qu√° m·ª©c c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa l·∫°c n·ªôi m·∫°c t·ª≠ cung...</p>");
        post5.setTags("chu k·ª≥ b·∫•t th∆∞·ªùng, d·∫•u hi·ªáu, c·∫£nh b√°o");
        post5.setViews(1340);
        post5.setLikes(98);
        post5.setCommentsCount(11);
        post5.setAuthor(authors.get(0));
        post5.setCategories(new HashSet<>(Arrays.asList(categories.get(1)))); // Chu k·ª≥ kinh nguy·ªát
        post5.setIsPublished(true);
        post5.setCreatedAt(LocalDateTime.now().minusDays(1));
        post5.setUpdatedAt(LocalDateTime.now().minusDays(1));
        post5.setIsDeleted(false);
        posts.add(post5);
        
        // Post 6: T∆∞ v·∫•n t√¢m l√Ω sau sinh
        BlogPost post6 = new BlogPost();
        post6.setTitle("T∆∞ v·∫•n t√¢m l√Ω cho ph·ª• n·ªØ sau sinh");
        post6.setSlug("tu-van-tam-ly-cho-phu-nu-sau-sinh");
        post6.setSummary("H·ªó tr·ª£ t√¢m l√Ω cho ph·ª• n·ªØ trong giai ƒëo·∫°n sau sinh.");
        post6.setContent("<h2>Tr·∫ßm c·∫£m sau sinh</h2><p>Sau khi sinh con, nhi·ªÅu ph·ª• n·ªØ c√≥ th·ªÉ g·∫∑p ph·∫£i c√°c v·∫•n ƒë·ªÅ v·ªÅ t√¢m l√Ω nh∆∞ tr·∫ßm c·∫£m sau sinh, lo l·∫Øng, stress...</p><h3>1. D·∫•u hi·ªáu tr·∫ßm c·∫£m sau sinh</h3><p>C·∫£m th·∫•y bu·ªìn b√£ k√©o d√†i, m·∫•t h·ª©ng th√∫ v·ªõi m·ªçi th·ª©, kh√≥ ng·ªß...</p><h3>2. C√°ch v∆∞·ª£t qua</h3><p>Chia s·∫ª v·ªõi ng∆∞·ªùi th√¢n, t√¨m ki·∫øm s·ª± h·ªó tr·ª£ t·ª´ chuy√™n gia t√¢m l√Ω...</p>");
        post6.setTags("t√¢m l√Ω, sau sinh, tr·∫ßm c·∫£m");
        post6.setViews(720);
        post6.setLikes(54);
        post6.setCommentsCount(6);
        post6.setAuthor(authors.get(0));
        post6.setCategories(new HashSet<>(Arrays.asList(categories.get(4)))); // T√¢m l√Ω & Tinh th·∫ßn
        post6.setIsPublished(false); // Draft
        post6.setCreatedAt(LocalDateTime.now());
        post6.setUpdatedAt(LocalDateTime.now());
        post6.setIsDeleted(false);
        posts.add(post6);
        
        blogPostRepository.saveAll(posts);
        log.info("‚úÖ ƒê√£ t·∫°o {} blog posts", blogPostRepository.count());
    }
}

